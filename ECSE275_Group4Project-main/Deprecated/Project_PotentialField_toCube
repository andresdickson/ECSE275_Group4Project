import coppeliasim_zmqremoteapi_client as zmq
import matplotlib.pyplot as plt
import numpy as np
import time


def get_position(sim, handle):
    # Get the target point position
    pos = sim.getObjectPosition(handle,sim.handle_world)
    return pos

def plot_grid(end_effector1, end_effector2, target):
    # Plot the grid map
    plt.figure(figsize=(8, 6))
    plt.scatter(end_effector1[0], end_effector1[1], color='blue', label="End Effector 1", s=100)
    plt.scatter(end_effector2[0], end_effector2[1], color='green', label="End Effector 2", s=100)
    plt.scatter(target[0], target[1], color='red', label="Target", s=100)

    # Grid properties
    plt.xlim(-1, 1)
    plt.ylim(-1, 1)
    plt.axhline(0, color='black',linewidth=1)
    plt.axvline(0, color='black',linewidth=1)
    plt.grid(True)
    plt.gca().set_aspect('equal', adjustable='box')
    
    # Labels
    plt.xlabel("X (meters)")
    plt.ylabel("Z (meters)")
    plt.legend()
    
    # Show plot
    plt.title("Robot End Effectors and Target Location")
    plt.show()

def compute_jacobian(q1, q2, q3, l0, l1, l2, l3):
    """
    This function computes the Jacobian matrix for a 3-DOF robotic manipulator.

    Parameters:
    - q1: Joint angle for the base rotation (rotation about the z-axis).
    - q2: Joint angle between the first and second link (rotation about the y-axis).
    - q3: Joint angle between the second and third link.
    - l0: Base link length (height from ground to first joint, though not used directly here).
    - l1: The length of the first link.
    - l2: The length of the second link.
    - l3: The length of the third link.

    Returns:
    - J: A 3x3 Jacobian matrix, which describes the relationship between joint velocities and end-effector velocities in Cartesian coordinates.
    """

    
    
    # Calculate the intermediate variables
    U = l1 - l2 * np.sin(q2) + l3 * np.cos(q2 + q3)
    H = l2 * np.cos(q2) + l3 * np.sin(q2 + q3)
    
    # Compute partial derivatives
    dU_q2 = -l2 * np.cos(q2) - l3 * np.sin(q2 + q3)
    dU_q3 = -l3 * np.sin(q2 + q3)
    dH_q2 = -l2 * np.sin(q2) + l3 * np.cos(q2 + q3)
    dH_q3 = l3 * np.cos(q2 + q3)
    
    # Compute the Jacobian matrix
    J = np.array([
        [-U * np.sin(q1), dU_q2 * np.cos(q1), dU_q3 * np.cos(q1)],
        [-U * np.cos(q1), dU_q2 * np.sin(q1), dU_q3 * np.sin(q1)],
        [0, dH_q2, dH_q3]
    ])
    
    return J

def compute_reppotgrad(point,robot_pos,eps=3, min_thresh = 1, max_thresh=15):
    """
    Computes the gradient of the repulsive potential between a point (obstacle) and the robot.
    
    This function calculates the repulsive potential gradient, which acts as a force pushing the robot 
    away from obstacles. The repulsive gradient is only applied when the robot is within a certain 
    threshold distance from the obstacle. For points farther than `max_thresh` or closer than `min_thresh`, 
    the gradient is zero.
    
    Parameters:
    -----------
    point : numpy array
        The position of the obstacle (x, y).
    
    robot_pos : numpy array
        The current position of the robot (x, y).
    
    eps : float, optional
        Scaling factor for the repulsive gradient (default is 3).
    
    min_thresh : float, optional
        Minimum distance threshold for the repulsive gradient to have an effect (default is 1).
    
    max_thresh : float, optional
        Maximum distance threshold for the repulsive gradient to have an effect (default is 15).
    
    Returns:
    --------
    dU : numpy array
        The repulsive potential gradient vector (dUx, dUy). Returns [0, 0] if the robot is outside the 
        threshold distance.
    """
    d = np.linalg.norm(point-robot_pos)
    
    if min_thresh < d and d < max_thresh:
        dU = - (eps) * (robot_pos - point) * (1/(d**3))
    else:
        dU = 0
        
    return np.array(dU)

def compute_attpotgrad(point,robot_pos,eps1=5, eps2=5, max_thresh=5):
    """
    Computes the gradient of the attractive potential between a point (goal) and the robot.

    This function calculates the attractive potential gradient, which acts as a force pulling the robot 
    toward the goal. The attractive gradient behaves differently based on whether the distance between 
    the robot and the goal is below or above a certain threshold (`max_thresh`).
    
    - When the distance is below the threshold, the gradient is quadratic.
    - When the distance is above the threshold, the gradient is conic.

    Parameters:
    -----------
    point : numpy array
        The position of the goal (x, y).
    
    robot_pos : numpy array
        The current position of the robot (x, y).
    
    eps1 : float, optional
        Scaling factor for the attractive gradient when within the threshold (default is 5).
    
    eps2 : float, optional
        Scaling factor for the attractive gradient when beyond the threshold (default is 5).
    
    max_thresh : float, optional
        Distance threshold where the attractive potential switches from quadratic to conic (default is 5).

    Returns:
    --------
    dU : list
        The attractive potential gradient vector [dUx, dUy].
    """
    
    d = np.linalg.norm(point-robot_pos)
    
    if d<max_thresh:
        dU = eps1 * (robot_pos - point)
    else:
        dU = max_thresh * eps2 * (robot_pos - point) * (1/d)
    
    return np.array(dU)

#%%
if __name__ == '__main__':
    
    client = zmq.RemoteAPIClient()
    sim = client.getObject('sim')

    plt.ion()  # Enable interactive mode
    
    # grab the robot and goal positions
    goal_1 = sim.getObjectHandle("/object_2/Dummy")
    goal_2 = sim.getObjectHandle("/object_1/Dummy")

    robot1_EE = sim.getObjectHandle("/IRB140[0]/connection/RG2/attachPoint/Dummy")
    robot2_EE = sim.getObjectHandle("/IRB140[1]/connection/RG2/attachPoint/Dummy")

    robot1_world = np.array(get_position(sim, robot1_EE))
    robot2_world = np.array(get_position(sim, robot2_EE))

    goal1_world = np.array(get_position(sim,goal_1))
    goal2_world = np.array(get_position(sim,goal_2))

    robot_1_link1 = sim.getObjectHandle("/IRB140[0]/joint")
    robot_1_link2 = sim.getObjectHandle("/IRB140[0]/link/joint")
    robot_1_link3 = sim.getObjectHandle("/IRB140[0]/link/joint/link/joint")

    robot_2_link1 = sim.getObjectHandle("/IRB140[1]/joint")
    robot_2_link2 = sim.getObjectHandle("/IRB140[1]/link/joint")
    robot_2_link3 = sim.getObjectHandle("/IRB140[1]/link/joint/link/joint")

    while (np.linalg.norm(robot1_world - goal1_world) > 0.01 or np.linalg.norm(robot2_world - goal2_world) > 0.01):
        print("1")
        print(np.linalg.norm(robot1_world - goal1_world))
        print("2")
        print(np.linalg.norm(robot2_world - goal2_world))
        # Poll positions of end effectors and target
        goal1_world = np.array(get_position(sim,goal_1))
        goal2_world = np.array(get_position(sim,goal_2))
        robot1_world = np.array(get_position(sim, robot1_EE))
        robot2_world = np.array(get_position(sim, robot2_EE))

        robot1_link1_pos = sim.getJointPosition(robot_1_link1)
        robot1_link2_pos = sim.getJointPosition(robot_1_link2)
        robot1_link3_pos = sim.getJointPosition(robot_1_link3)

        robot2_link1_pos = sim.getJointPosition(robot_2_link1)
        robot2_link2_pos = sim.getJointPosition(robot_2_link2)
        robot2_link3_pos = sim.getJointPosition(robot_2_link3)

        # Plot the positions on the grid map
        # plot_grid(robot1_world, robot2_world, goal1_world)

        F_rep_1 = compute_reppotgrad(robot2_world, robot1_world)
        F_rep_2 = compute_reppotgrad(robot1_world, robot2_world)

        F_att_1 = compute_attpotgrad(goal2_world, robot1_world)
        F_att_2 = compute_attpotgrad(goal1_world, robot2_world)

        J1 = compute_jacobian(robot1_link1_pos, robot1_link2_pos, robot1_link3_pos, 0.352, 0.070, 0.360, 0.574)
        J2 = compute_jacobian(robot2_link1_pos, robot2_link2_pos, robot2_link3_pos, 0.352, 0.070, 0.360, 0.574)

        alpha_att = 1.0
        beta_rep = 1.0
        F_total_1 = -alpha_att * F_att_1 - beta_rep * F_rep_1
        # print(F_total_1)
        F_total_1[1] = 0
        F_total_2 = -alpha_att * F_att_2 - beta_rep * F_rep_2
        F_total_2[1] = 0
        plt.figure()
        plt.quiver(robot1_world[0], robot1_world[2], F_total_1[0], F_total_1[2], color='blue')
        plt.quiver(robot2_world[0], robot2_world[2], F_total_2[0], F_total_2[2], color='green')
        plt.show()  # Non-blocking in interactive mode
       

        if np.linalg.norm(robot1_world - goal1_world) < 0.01:
            robot1_joint_vel = np.zeros_like(robot1_joint_vel)
            robot2_joint_vel = np.matmul(J2.transpose(), F_total_2)
        elif np.linalg.norm(robot2_world - goal2_world) < 0.01:
            robot1_joint_vel = np.matmul(J1.transpose(), F_total_1)
            robo21_joint_vel = np.zeros_like(robot2_joint_vel)
        else:
            robot1_joint_vel = np.matmul(J1.transpose(), F_total_1)
            robot2_joint_vel = np.matmul(J2.transpose(), F_total_2)

        max_velocity = 0.1  # Adjust as needed
        robot1_joint_vel = max_velocity * (robot1_joint_vel / np.linalg.norm(robot1_joint_vel))
        robot2_joint_vel = max_velocity * (robot2_joint_vel / np.linalg.norm(robot2_joint_vel))

        print(robot1_joint_vel)
        sim.setJointTargetVelocity(robot_1_link1, robot1_joint_vel[0])
        sim.setJointTargetVelocity(robot_1_link2, robot1_joint_vel[1])
        sim.setJointTargetVelocity(robot_1_link3, robot1_joint_vel[2])

        sim.setJointTargetVelocity(robot_2_link1, -robot2_joint_vel[0])
        sim.setJointTargetVelocity(robot_2_link2, -robot2_joint_vel[1])
        sim.setJointTargetVelocity(robot_2_link3, -robot2_joint_vel[2])

        # Wait before polling again
        time.sleep(0.01)




